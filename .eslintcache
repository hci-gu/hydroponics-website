[{"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/index.js":"1","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/api.js":"2","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/components/Plant.js":"3","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/state.js":"4","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/pages/Home.js":"5","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/pages/Info.js":"6","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/pages/Admin/index.js":"7","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/pages/Admin/components/PlantCreator.js":"8","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/pages/Admin/components/ImagePagination.js":"9","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/hooks/index.js":"10"},{"size":605,"mtime":1625061893540,"results":"11","hashOfConfig":"12"},{"size":1142,"mtime":1625060595772,"results":"13","hashOfConfig":"12"},{"size":4687,"mtime":1625059091252,"results":"14","hashOfConfig":"12"},{"size":206,"mtime":1625060889196,"results":"15","hashOfConfig":"12"},{"size":2300,"mtime":1625058917642,"results":"16","hashOfConfig":"12"},{"size":2537,"mtime":1625054360187,"results":"17","hashOfConfig":"12"},{"size":756,"mtime":1625060623541,"results":"18","hashOfConfig":"12"},{"size":3625,"mtime":1625061355566,"results":"19","hashOfConfig":"12"},{"size":1196,"mtime":1625059676541,"results":"20","hashOfConfig":"12"},{"size":2243,"mtime":1625061153347,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"adfq0a",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"26"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"26"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/index.js",[],"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/api.js",[],["47","48"],"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/components/Plant.js",["49","50"],"import React, { useEffect, useState } from 'react'\nimport { Card, Image as AntImage, Slider } from 'antd'\nimport moment from 'moment'\nimport styled from 'styled-components'\nimport { getImagesForPlant } from '../api'\nimport { useImagesForPlant } from '../hooks'\n\nconst CARD_WIDTH = 760\n\nconst X_OFFSET = 30\nconst Y_OFFSET = 300\nconst IMAGE_WIDTH = 1600\nconst PLANT_WIDTH = 800\n\nconst gridStyle = {\n  width: '25%',\n  textAlign: 'center',\n}\n\nconst bigGrid = {\n  width: '100%',\n}\n\nconst ImageCropper = styled.div`\n  width: ${CARD_WIDTH}px;\n  height: 700px;\n  overflow: hidden;\n\n  position: relative;\n\n  > div {\n    display: block;\n  }\n  > div > img {\n    position: absolute;\n  }\n  > span {\n    width: 150px;\n    padding: 5px;\n    position: absolute;\n    z-index: 100;\n    background-color: black;\n    color: white;\n    left: calc(50% - 75px);\n    bottom: 0;\n  }\n`\nconst { Meta } = Card\n\nlet imageCache = {}\n\nconst Plant = ({ plant }) => {\n  const [images, index, setIndex] = useImagesForPlant(plant)\n\n  const imageStyle = {\n    top: -Y_OFFSET,\n    left: -(PLANT_WIDTH * plant.imagePosition) - X_OFFSET,\n    width: IMAGE_WIDTH,\n  }\n\n  useEffect(() => {\n    const from = Math.max(0, index - 10)\n    const to = Math.min(images.length, index + 10)\n\n    for (let i = from; i < to; i++) {\n      if (!imageCache[i]) {\n        const preloadImage = new Image()\n\n        preloadImage.src = images[i].imageUrl\n        imageCache[i] = preloadImage\n      }\n    }\n  }, [images, index])\n\n  if (images.length === 0 && !images[index])\n    return (\n      <Card\n        hoverable\n        style={{ width: `${CARD_WIDTH}px`, textAlign: 'center' }}\n        title={`Den här plantan är påväg!`}\n      >\n        <ImageCropper>\n          <AntImage\n            style={{ width: 260, top: 160, left: 250 }}\n            src=\"https://i.imgur.com/1KmQLKx.png\"\n            preview={false}\n          />\n        </ImageCropper>\n        <Card.Grid hoverable={false} style={gridStyle}>\n          {' '}\n          <Meta title=\"pH\" description={`${plant.ph}`} />\n        </Card.Grid>\n        <Card.Grid hoverable={false} style={gridStyle}>\n          {' '}\n          <Meta\n            title=\"Temperatur\"\n            description={`${plant.temperature ? plant.temperature : '-'} c°`}\n          />\n        </Card.Grid>\n        <Card.Grid hoverable={false} style={gridStyle}>\n          {' '}\n          <Meta\n            title=\"Ljustimmar\"\n            description={`${plant.lightHours ? plant.lightHours : '-'}/dag`}\n          />\n        </Card.Grid>\n        <Card.Grid hoverable={false} style={gridStyle}>\n          {' '}\n          <Meta\n            title=\"Planterad\"\n            description={`${moment(plant.growthStart).format('YYYY-MM-DD')}`}\n          />\n        </Card.Grid>\n        <Card.Grid hoverable={false} style={bigGrid}>\n          <Meta\n            title=\"Annan information\"\n            description={`${plant.information}`}\n          />\n        </Card.Grid>\n      </Card>\n    )\n\n  const imageToDisplay = images[index]\n  return (\n    <Card\n      hoverable\n      style={{ width: `${CARD_WIDTH}px`, textAlign: 'center' }}\n      title={`${plant.name} - ${plant.id}`}\n    >\n      <ImageCropper>\n        <AntImage\n          style={imageStyle}\n          src={imageToDisplay.imageUrl}\n          preview={false}\n        />\n      </ImageCropper>\n      <Slider\n        value={index}\n        min={0}\n        max={images.length - 1}\n        onChange={(val) => setIndex(val)}\n        tipFormatter={(val) => (\n          <strong>\n            {moment(imageToDisplay.imageTaken).format('YYYY-MM-DD HH:mm')}\n          </strong>\n        )}\n        tooltipVisible\n      />\n\n      <Card.Grid hoverable={false} style={gridStyle}>\n        {' '}\n        <Meta title=\"pH\" description={`${plant.ph}`} />\n      </Card.Grid>\n      <Card.Grid hoverable={false} style={gridStyle}>\n        {' '}\n        <Meta\n          title=\"Temperatur\"\n          description={`${\n            imageToDisplay.temperature\n              ? imageToDisplay.temperature.toFixed(2)\n              : '-'\n          } c°`}\n        />\n      </Card.Grid>\n      <Card.Grid hoverable={false} style={gridStyle}>\n        {' '}\n        <Meta\n          title=\"Ljustimmar\"\n          description={`${plant.lightHours ? plant.lightHours : '-'}/dag`}\n        />\n      </Card.Grid>\n      <Card.Grid hoverable={false} style={gridStyle}>\n        {' '}\n        <Meta\n          title=\"Planterad\"\n          description={`${moment(plant.growthStart).format('YYYY-MM-DD')}`}\n        />\n      </Card.Grid>\n      <Card.Grid hoverable={false} style={bigGrid}>\n        <Meta title=\"Annan information\" description={`${plant.information}`} />\n      </Card.Grid>\n    </Card>\n  )\n}\n\nexport default Plant\n","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/state.js",[],"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/pages/Home.js",["51"],"import React from 'react'\nimport styled from 'styled-components'\nimport Plant from '../components/Plant'\nimport { PageHeader, Button } from 'antd'\nimport { Link } from 'react-router-dom'\nimport { useImages, usePlants } from '../hooks'\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n  background-color: #fafafa;\n  border: 20px;\n`\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n  margin: 100px;\n  margin-top: 40px;\n`\n\nconst HeaderRow = styled.div`\n  flex-direction: row;\n  display: flex;\n  background-color: white;\n`\n\nconst InfoContainer = styled.div`\n  width: 30%;\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  justify-items: right;\n  padding-left: 50px;\n\n  @media (max-width: 800px) {\n    margin: 0 auto;\n    width: 90%;\n    grid-template-columns: 1fr;\n  }\n`\nconst PlantsContainer = styled.div`\n  width: 70%;\n  display: grid;\n  grid-template-columns: repeat(1, 1fr);\n  grid-gap: 50px;\n  justify-items: left;\n\n  @media (max-width: 800px) {\n    margin: 0 auto;\n    width: 90%;\n    grid-template-columns: 1fr;\n    grid-gap: 50px;\n  }\n`\n\nfunction App() {\n  const plants = usePlants()\n\n  return (\n    <Root>\n      <HeaderRow>\n        <PageHeader\n          style={{}}\n          className=\"site-page-header\"\n          title=\"The hydroponics project\"\n        />\n      </HeaderRow>\n      <Container>\n        <PlantsContainer>\n          {plants.map((plant, i) => (\n            <Plant plant={plant} key={`Plant_${i}`} />\n          ))}\n        </PlantsContainer>\n        <InfoContainer>\n          <div>\n            <p\n              style={{ border: 0, width: `300px` }}\n              headStyle={{ border: 0, textAlign: `left` }}\n              bodyStyle={{ textAlign: `left` }}\n            >\n              <b>Om projektet</b> <br></br>\n              Det här projektet utforskar metoder för att studera och\n              kontrollera växter med hjälp av digital teknik. Resultaten från\n              forskningen kommer användas i forskning inom människa-dator\n              interaktion.\n            </p>\n            <Button type=\"primary\" htmlType=\"submit\">\n              <Link to=\"/info\">Läs vidare</Link>\n            </Button>\n          </div>\n        </InfoContainer>\n      </Container>\n    </Root>\n  )\n}\n\nexport default App\n","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/pages/Info.js",[],"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/pages/Admin/index.js",[],"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/pages/Admin/components/PlantCreator.js",["52"],"import { Card, Form, Input, InputNumber, DatePicker, Button } from 'antd'\nimport { DeleteOutlined } from '@ant-design/icons'\nimport moment from 'moment'\nimport { useCreatePlant, useDeletePlant, useUpdatePlant } from '../../../hooks'\nimport { useAtom } from 'jotai'\nimport { isLoadingAtom } from '../../../state'\n\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n}\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16,\n  },\n}\n\nconst DeleteButton = (plant) => {\n  const deletePlant = useDeletePlant()\n\n  return (\n    <DeleteOutlined\n      type=\"danger\"\n      htmlType=\"submit\"\n      onClick={() => deletePlant(plant)}\n    >\n      delete\n    </DeleteOutlined>\n  )\n}\n\nconst CreatePlant = () => {\n  const [isLoading] = useAtom(isLoadingAtom)\n  const createPlant = useCreatePlant()\n  const onFinish = async (values) => {\n    await createPlant(values)\n  }\n\n  return (\n    <Card title=\"Create plant\">\n      <Form {...layout} name=\"basic\" initialValues={{}} onFinish={onFinish}>\n        <Form.Item label=\"Name\" name=\"name\">\n          <Input />\n        </Form.Item>\n        <Form.Item label=\"Temperature\" name=\"temperature\">\n          <InputNumber />\n        </Form.Item>\n        <Form.Item label=\"Light hours\" name=\"lightHours\">\n          <InputNumber />\n        </Form.Item>\n        <Form.Item label=\"pH\" name=\"ph\">\n          <InputNumber />\n        </Form.Item>\n        <Form.Item label=\"Position in image\" name=\"imagePosition\">\n          <InputNumber />\n        </Form.Item>\n        <Form.Item label=\"Growth Start\" name=\"growthStart\">\n          <DatePicker />\n        </Form.Item>\n        <Form.Item label=\"Other information\" name=\"information\">\n          <Input.TextArea />\n        </Form.Item>\n        <Form.Item {...tailLayout}>\n          <SubmitButton />\n        </Form.Item>\n      </Form>\n    </Card>\n  )\n}\n\nconst SubmitButton = () => {\n  const [isLoading] = useAtom(isLoadingAtom)\n  return (\n    <Button type=\"primary\" htmlType=\"submit\" disabled={isLoading}>\n      {!isLoading ? 'Submit' : 'Loading...'}\n    </Button>\n  )\n}\n\nconst PlantCreator = ({ plant }) => {\n  const updatePlant = useUpdatePlant()\n  const onFinish = async (values) => {\n    updatePlant({\n      ...values,\n      id: plant.id,\n    })\n  }\n\n  if (!plant) {\n    return CreatePlant()\n  }\n\n  return (\n    <Card\n      title={`${plant.name} - ${plant.id}`}\n      extra={<DeleteButton plant={plant} />}\n    >\n      <Form\n        {...layout}\n        name=\"basic\"\n        initialValues={{\n          ...plant,\n          growthStart: moment(plant.growthStart),\n          growthEnd: moment(plant.growthEnd),\n        }}\n        onFinish={onFinish}\n      >\n        <Form.Item label=\"Name\" name=\"name\">\n          <Input />\n        </Form.Item>\n        <Form.Item label=\"Temperature\" name=\"temperature\">\n          <InputNumber />\n        </Form.Item>\n        <Form.Item label=\"Light hours\" name=\"lightHours\">\n          <InputNumber />\n        </Form.Item>\n        <Form.Item label=\"pH\" name=\"ph\">\n          <InputNumber />\n        </Form.Item>\n        <Form.Item label=\"Position in image\" name=\"imagePosition\">\n          <InputNumber />\n        </Form.Item>\n        <Form.Item label=\"Growth Start\" name=\"growthStart\">\n          <DatePicker />\n        </Form.Item>\n        <Form.Item label=\"Growth End\" name=\"growthEnd\">\n          <DatePicker />\n        </Form.Item>\n        <Form.Item label=\"Other information\" name=\"information\">\n          <Input.TextArea />\n        </Form.Item>\n        <Form.Item {...tailLayout}>\n          <SubmitButton />\n        </Form.Item>\n      </Form>\n    </Card>\n  )\n}\n\nexport default PlantCreator\n","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/pages/Admin/components/ImagePagination.js",["53","54","55","56"],"import React, { useState, useEffect } from 'react'\nimport moment from 'moment'\nimport styled from 'styled-components'\nimport { Pagination } from 'antd'\nimport { getImages } from '../../../api'\nimport { useImagePagination, useImages } from '../../../hooks'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`\n\nconst Image = styled.div`\n  margin: 10px;\n  display: flex;\n  flex-direction: column;\n\n  > img {\n    width: 200px;\n    height: 100px;\n  }\n`\n\nconst ImagePagination = () => {\n  const { images, page, maxPages, pageSize, setPageSize, setPage } =\n    useImagePagination()\n\n  return (\n    <>\n      <Container>\n        {images.map((image, i) => (\n          <Image key={`Image_${image.imageTaken}`}>\n            <span>{moment(image.imageTaken).format('YYYY-MM-DD HH:mm')}</span>\n            <img src={image.imageUrl} alt=\"Plant\"></img>\n          </Image>\n        ))}\n      </Container>\n      <Pagination\n        defaultCurrent={page}\n        total={maxPages * pageSize}\n        pageSize={pageSize}\n        onShowSizeChange={(_, size) => setPageSize(size)}\n        onChange={(value) => setPage(value)}\n      />\n    </>\n  )\n}\n\nexport default ImagePagination\n","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/hooks/index.js",[],{"ruleId":"57","replacedBy":"58"},{"ruleId":"59","replacedBy":"60"},{"ruleId":"61","severity":1,"message":"62","line":1,"column":28,"nodeType":"63","messageId":"64","endLine":1,"endColumn":36},{"ruleId":"61","severity":1,"message":"65","line":5,"column":10,"nodeType":"63","messageId":"64","endLine":5,"endColumn":27},{"ruleId":"61","severity":1,"message":"66","line":6,"column":10,"nodeType":"63","messageId":"64","endLine":6,"endColumn":19},{"ruleId":"61","severity":1,"message":"67","line":38,"column":10,"nodeType":"63","messageId":"64","endLine":38,"endColumn":19},{"ruleId":"61","severity":1,"message":"62","line":1,"column":17,"nodeType":"63","messageId":"64","endLine":1,"endColumn":25},{"ruleId":"61","severity":1,"message":"68","line":1,"column":27,"nodeType":"63","messageId":"64","endLine":1,"endColumn":36},{"ruleId":"61","severity":1,"message":"69","line":5,"column":10,"nodeType":"63","messageId":"64","endLine":5,"endColumn":19},{"ruleId":"61","severity":1,"message":"66","line":6,"column":30,"nodeType":"63","messageId":"64","endLine":6,"endColumn":39},"no-native-reassign",["70"],"no-negated-in-lhs",["71"],"no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","'getImagesForPlant' is defined but never used.","'useImages' is defined but never used.","'isLoading' is assigned a value but never used.","'useEffect' is defined but never used.","'getImages' is defined but never used.","no-global-assign","no-unsafe-negation"]