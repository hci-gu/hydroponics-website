[{"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/index.js":"1","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/api.js":"2","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/Home.js":"3","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/Admin.js":"4","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/components/Plant.js":"5","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/components/ImageDisplayer.js":"6","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/state.js":"7","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/components/ImageList.js":"8"},{"size":1206,"mtime":1613394765541,"results":"9","hashOfConfig":"10"},{"size":1128,"mtime":1613395565754,"results":"11","hashOfConfig":"10"},{"size":1231,"mtime":1613397710093,"results":"12","hashOfConfig":"10"},{"size":758,"mtime":1613125615227,"results":"13","hashOfConfig":"10"},{"size":3356,"mtime":1608218097758,"results":"14","hashOfConfig":"10"},{"size":2873,"mtime":1613396669445,"results":"15","hashOfConfig":"10"},{"size":168,"mtime":1613125454262,"results":"16","hashOfConfig":"10"},{"size":1596,"mtime":1613394801503,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1iljuhf",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"20"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/index.js",[],["37","38"],"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/api.js",[],"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/Home.js",["39","40","41","42"],"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/Admin.js",[],"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/components/Plant.js",[],"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/components/ImageDisplayer.js",["43"],"import React, { useEffect, useState } from 'react'\nimport { Card, Image, Slider } from 'antd'\nimport moment from 'moment'\nimport styled from 'styled-components'\nimport { getImagesForPlant } from '../api'\n\nconst CARD_WIDTH = 600\n\nconst X_OFFSET = 300\nconst Y_OFFSET = 300\nconst IMAGE_WIDTH = 1600\nconst PLANT_WIDTH = 600\n\nconst gridStyle = {\n  width: '25%',\n  textAlign: 'center',\n}\n\nconst bigGrid = {\n  width: '100%',\n}\n\nconst ImageCropper = styled.div`\n  width: ${CARD_WIDTH}px;\n  height: 700px;\n  overflow: hidden;\n\n  position: relative;\n\n  > div {\n    display: block;\n  }\n  > div > img {\n    position: absolute;\n  }\n  > span {\n    width: 150px;\n    padding: 5px;\n    position: absolute;\n    z-index: 100;\n    background-color: black;\n    color: white;\n    left: calc(50% - 75px);\n    bottom: 0;\n  }\n`\nconst { Meta } = Card\n\nconst PlantImages = ({ plant }) => {\n  const [images, setImages] = useState([])\n  const [index, setIndex] = useState(0)\n  useEffect(() => {\n    const getData = async () => {\n      const _images = await getImagesForPlant(plant)\n      setImages(_images.reverse())\n      setIndex(_images.length - 1)\n    }\n    getData()\n  }, [setImages, setIndex])\n\n  if (images.length === 0) return <div>empty</div>\n\n  const imageStyle = {\n    top: -Y_OFFSET,\n    left: -(PLANT_WIDTH * plant.imagePosition) - X_OFFSET,\n    width: IMAGE_WIDTH,\n  }\n\n  const imageToDisplay = images[index]\n  return (\n    <Card\n      hoverable\n      style={{ width: `${CARD_WIDTH}px`, textAlign: 'center' }}\n      title={`${plant.name} - ${plant.id}`}\n    >\n      <Card.Grid hoverable={false} style={gridStyle}>\n        {' '}\n        <Meta title=\"pH\" description={`${plant.ph}`} />\n      </Card.Grid>\n      <Card.Grid hoverable={false} style={gridStyle}>\n        {' '}\n        <Meta title=\"Temperature\" description={`${plant.temperature}cÂ°`} />\n      </Card.Grid>\n      <Card.Grid hoverable={false} style={gridStyle}>\n        {' '}\n        <Meta title=\"Light hours\" description={`${plant.lightHours}/day`} />\n      </Card.Grid>\n      <Card.Grid hoverable={false} style={gridStyle}>\n        {' '}\n        <Meta\n          title=\"Growth start\"\n          description={`${moment(plant.growthStart).format('YYYY-MM-DD')}`}\n        />\n      </Card.Grid>\n      <Card.Grid hoverable={false} style={bigGrid}>\n        {' '}\n        <Meta title=\"Other information\" description={`${plant.information}`} />\n      </Card.Grid>\n      <ImageCropper>\n        <Image style={imageStyle} src={imageToDisplay.imageUrl} />\n      </ImageCropper>\n      <Slider\n        value={index}\n        min={0}\n        max={images.length - 1}\n        onChange={(val) => setIndex(val)}\n        tipFormatter={(val) => (\n          <strong>\n            {moment(imageToDisplay.imageTaken).format('YYYY-MM-DD HH:mm')}\n          </strong>\n        )}\n        tooltipVisible\n      />\n    </Card>\n  )\n}\n\nexport default PlantImages\n","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/state.js",[],"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/components/ImageList.js",["44"],"import React, { useState, useEffect } from 'react'\nimport moment from 'moment'\nimport { useRecoilState } from 'recoil'\nimport { imagesAtom } from '../state'\nimport styled from 'styled-components'\nimport { Pagination } from 'antd'\nimport { getImages } from '../api'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`\n\nconst Image = styled.div`\n  border: 1px solid black;\n  padding: 10px;\n  margin: 10px;\n\n  display: flex;\n  flex-direction: column;\n\n  > img {\n    width: 200px;\n    height: 100px;\n  }\n`\n\nconst ImageList = () => {\n  const [images, setImages] = useRecoilState(imagesAtom)\n  const [page, setPage] = useState(1)\n  const [pageSize, setPageSize] = useState(25)\n  const [maxPages, setMaxPages] = useState(1)\n\n  useEffect(() => {\n    const getData = async () => {\n      const response = await getImages(page - 1, pageSize)\n      setImages(response.images)\n      setMaxPages(Math.ceil(response.count / response.limit))\n    }\n    getData()\n  }, [page, pageSize, setImages, setMaxPages])\n\n  return (\n    <>\n      <Container>\n        {images.map((image, i) => (\n          <Image key={`Image_${image.imageTaken}`}>\n            <span>{moment(image.imageTaken).format('YYYY-MM-DD HH:mm')}</span>\n            <img src={image.imageUrl}></img>\n          </Image>\n        ))}\n      </Container>\n      <Pagination\n        defaultCurrent={page}\n        total={maxPages * pageSize}\n        pageSize={pageSize}\n        onShowSizeChange={(_, size) => setPageSize(size)}\n        onChange={(value) => setPage(value)}\n      />\n    </>\n  )\n}\n\nexport default ImageList\n",{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":3,"column":8,"nodeType":"51","messageId":"52","endLine":3,"endColumn":22},{"ruleId":"49","severity":1,"message":"53","line":12,"column":7,"nodeType":"51","messageId":"52","endLine":12,"endColumn":16},{"ruleId":"49","severity":1,"message":"54","line":40,"column":9,"nodeType":"51","messageId":"52","endLine":40,"endColumn":15},{"ruleId":"49","severity":1,"message":"55","line":41,"column":9,"nodeType":"51","messageId":"52","endLine":41,"endColumn":15},{"ruleId":"56","severity":1,"message":"57","line":59,"column":6,"nodeType":"58","endLine":59,"endColumn":27,"suggestions":"59"},{"ruleId":"60","severity":1,"message":"61","line":50,"column":13,"nodeType":"62","endLine":50,"endColumn":39},"no-native-reassign",["63"],"no-negated-in-lhs",["64"],"no-unused-vars","'ImageDisplayer' is defined but never used.","Identifier","unusedVar","'Container' is assigned a value but never used.","'images' is assigned a value but never used.","'plants' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'plant'. Either include it or remove the dependency array.","ArrayExpression",["65"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation",{"desc":"66","fix":"67"},"Update the dependencies array to be: [plant, setImages, setIndex]",{"range":"68","text":"69"},[1149,1170],"[plant, setImages, setIndex]"]