[{"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/index.js":"1","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/api.js":"2","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/Home.js":"3","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/Admin.js":"4","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/components/Plant.js":"5","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/components/ImageDisplayer.js":"6","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/state.js":"7","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/components/ImageList.js":"8"},{"size":1162,"mtime":1613126098529,"results":"9","hashOfConfig":"10"},{"size":956,"mtime":1613127684967,"results":"11","hashOfConfig":"10"},{"size":836,"mtime":1613125403169,"results":"12","hashOfConfig":"10"},{"size":758,"mtime":1613125615227,"results":"13","hashOfConfig":"10"},{"size":3356,"mtime":1608218097758,"results":"14","hashOfConfig":"10"},{"size":1848,"mtime":1613123646126,"results":"15","hashOfConfig":"10"},{"size":168,"mtime":1613125454262,"results":"16","hashOfConfig":"10"},{"size":1450,"mtime":1613127645412,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1iljuhf",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32","usedDeprecatedRules":"20"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37"},"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/index.js",[],["38","39"],"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/api.js",[],"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/Home.js",["40"],"import React from 'react'\nimport styled from 'styled-components'\nimport ImageDisplayer from './components/ImageDisplayer'\nimport { useRecoilValue } from 'recoil'\nimport { imagesAtom, plantsAtom } from './state'\n\nconst Root = styled.div`\n  display: flex;\n  flex-direction: column;\n`\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`\nconst PlantsContainer = styled.div`\n  margin: 50px auto;\n  width: 80%;\n  display: grid;\n  grid-template-columns: 1fr 1fr;\n  grid-gap: 20px;\n`\n\nfunction App() {\n  const images = useRecoilValue(imagesAtom)\n  const plants = useRecoilValue(plantsAtom)\n\n  return (\n    <Root>\n      <PlantsContainer>\n        {plants.map((plant) => (\n          <ImageDisplayer plant={plant} images={images} />\n        ))}\n      </PlantsContainer>\n    </Root>\n  )\n}\n\nexport default App\n","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/Admin.js",[],"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/components/Plant.js",[],"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/components/ImageDisplayer.js",["41"],"import { Card, Image } from 'antd'\nimport moment from 'moment'\nimport styled from 'styled-components'\n\nconst CARD_WIDTH = 600\n\nconst X_OFFSET = 300\nconst Y_OFFSET = 300\nconst IMAGE_WIDTH = 1600\nconst PLANT_WIDTH = 600\n\nconst gridStyle = {\n  width: '25%',\n  textAlign: 'center',\n}\n\nconst bigGrid = {\n  width: '100%',\n}\n\nconst ImageCropper = styled.div`\n  width: ${CARD_WIDTH}px;\n  height: 700px;\n  overflow: hidden;\n\n  position: relative;\n\n  > div {\n    display: block;\n  }\n  > div > img {\n    position: absolute;\n  }\n`\nconst { Meta } = Card\nconst Plant = ({ plant, images }) => {\n  if (images.length === 0) return <div>empty</div>\n\n  const imageStyle = {\n    top: -Y_OFFSET,\n    left: -(PLANT_WIDTH * plant.imagePosition) - X_OFFSET,\n    width: IMAGE_WIDTH,\n  }\n\n  return (\n    <Card\n      hoverable\n      style={{ width: `${CARD_WIDTH}px`, textAlign: 'center' }}\n      title={`${plant.name} - ${plant.id}`}\n    >\n      <Card.Grid hoverable={false} style={gridStyle}>\n        {' '}\n        <Meta title=\"pH\" description={`${plant.ph}`} />\n      </Card.Grid>\n      <Card.Grid hoverable={false} style={gridStyle}>\n        {' '}\n        <Meta title=\"Temperature\" description={`${plant.temperature}cÂ°`} />\n      </Card.Grid>\n      <Card.Grid hoverable={false} style={gridStyle}>\n        {' '}\n        <Meta title=\"Light hours\" description={`${plant.lightHours}/day`} />\n      </Card.Grid>\n      <Card.Grid hoverable={false} style={gridStyle}>\n        {' '}\n        <Meta title=\"Growth start\" description={`${plant.ph}`} />\n      </Card.Grid>\n      <Card.Grid hoverable={false} style={bigGrid}>\n        {' '}\n        <Meta title=\"Other information\" description={`${plant.information}`} />\n      </Card.Grid>\n      <ImageCropper>\n        <Image style={imageStyle} src={images[0].imageUrl} />\n      </ImageCropper>\n    </Card>\n  )\n}\n\nexport default Plant\n","/Users/xandse/Documents/code/work/gu/hydroponics-website/src/state.js",[],"/Users/xandse/Documents/code/work/gu/hydroponics-website/src/components/ImageList.js",["42"],"import React, { useState, useEffect } from 'react'\nimport moment from 'moment'\nimport { useRecoilState } from 'recoil'\nimport { imagesAtom } from '../state'\nimport styled from 'styled-components'\nimport { Pagination } from 'antd'\nimport { getImages } from '../api'\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: row;\n  flex-wrap: wrap;\n`\n\nconst Image = styled.div`\n  border: 1px solid black;\n  padding: 10px;\n  margin: 10px;\n\n  display: flex;\n  flex-direction: column;\n\n  > img {\n    width: 200px;\n    height: 100px;\n  }\n`\n\nconst ImageList = () => {\n  const [images, setImages] = useRecoilState(imagesAtom)\n  const [page, setPage] = useState(1)\n  const [pageSize, setPageSize] = useState(25)\n\n  useEffect(() => {\n    const getData = async () => {\n      const _images = await getImages(page - 1, pageSize)\n      setImages(_images)\n    }\n    getData()\n  }, [page, pageSize, setImages])\n\n  return (\n    <>\n      <Container>\n        {images.map((image, i) => (\n          <Image key={`Image_${image.imageTaken}`}>\n            <span>{moment(image.imageTaken).format('YYYY-MM-DD HH:mm')}</span>\n            <img src={image.imageUrl}></img>\n          </Image>\n        ))}\n      </Container>\n      <Pagination\n        defaultCurrent={page}\n        total={100}\n        pageSize={pageSize}\n        onShowSizeChange={(_, size) => setPageSize(size)}\n        onChange={(value) => setPage(value)}\n      />\n    </>\n  )\n}\n\nexport default ImageList\n",{"ruleId":"43","replacedBy":"44"},{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","severity":1,"message":"48","line":12,"column":7,"nodeType":"49","messageId":"50","endLine":12,"endColumn":16},{"ruleId":"47","severity":1,"message":"51","line":2,"column":8,"nodeType":"49","messageId":"50","endLine":2,"endColumn":14},{"ruleId":"52","severity":1,"message":"53","line":48,"column":13,"nodeType":"54","endLine":48,"endColumn":39},"no-native-reassign",["55"],"no-negated-in-lhs",["56"],"no-unused-vars","'Container' is assigned a value but never used.","Identifier","unusedVar","'moment' is defined but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]